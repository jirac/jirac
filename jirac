#!/bin/bash
#
# Jirac is a tool to generate formatted comments based on informations such as
# commits, branch, version and concerned application.
#
# Must be used at the root of a maven project. POM must contains scm
# balise. It allows jirac to generate link to the source repository.
# The output is a message you can paste in jira
#
# Usage: jirac [--help|-h] [--number|-n number_of_commits] [--print-mode|-p mode] [--silent|-s] [--grep|-g pattern]
# With the --number option, you specify you want the n last pushed commit in your comment
# With the --silent option, log print are disabled
# With the --print-mode, you specify the order of the commit in the message.
# With the --grep, you specify a pattern match commits. If none match, the programm exits
# 0: Most recent first
# 1: oldest first
#
# More information can be find at the following url: http://ihommani.gitbooks.io/jirac-guide/
#
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.

shopt -u sourcepath
jirac_dir=$(dirname "$0")

source "$jirac_dir"/core_functions.sh
source "$jirac_dir"/ui_functions.sh

umask 077 # Set access file only to the user who launched the script

# default values
silent_mode="no" # think that a string tells more than number
print_mode="0"

while [ $# -gt 0 ]
do
        case $1 in
            --number | -number | --n | -n )
                test -z "$2" && error "Number of commits requires an argument!"
                test 0 -gt "$2" && error "Number of commits option must be positive"
                number_of_commit=$2
                shift
                ;;
            --print-mode | -print-mode | --p | -p )
                test -z $2 && error "Print mode requires an argument!"
                jirac_apply_print_mode $2
                shift
                ;;
            --silent | -silent | --s | -s )
                silent_mode="yes"
                ;;
            --grep | -grep | --g | -g )
                regexp=$2
                test -z $regexp && error "grep option requires a regexp."
                shift
                ;;
            --help | -help | --h | -h | --? | -? )
                usage_and_exit
                ;;
            -* )
                error "Unreconized option: $1"
                ;;
            * )
                break
                ;;
        esac
        shift
    done

jirac_banner_print
jirac_echo -ne "# \033[7mDEPENDENCY CHECK...\033[m "

if [[ $OSTYPE == darwin* ]]; then
    jirac_check_dependency pbcopy
elif [[ $OSTYPE == msys ]]; then
    jirac_check_dependency clip
    jirac_check_dependency mktemp
else
    jirac_check_dependency xclip
fi

for dependency in git sed xml_parser
do
	jirac_check_dependency $dependency
done

jirac_echo ""
jirac_echo ""
jirac_echo -ne "# \033[7mCONFIGURATION CHECK...\033[m "

create_editor_variable

jirac_echo " OK!"
jirac_echo ""
jirac_echo -e "# \033[7mQUESTION TIME!\033[m"

# project folder

root_dir=$(jirac_get_git_project_root_directory)

if [[ -d $root_dir && -f "${root_dir}/pom.xml" ]]; then
	project_path=$root_dir
	project_pom="$root_dir/pom.xml"
	project_git_location="$root_dir/.git"
	branch=$(jirac_get_git_current_remote_branch)
else
    jirac_log INFO "To run jirac please move inside your maven project on which you want to comment a commit."
fi

# sanity checks
if [ ! -f  "$project_pom" ]; then
	jirac_log ERROR "No POM file found in the project directory. Aborting."
	exit 1
fi

if [ ! -d "$project_git_location" ]; then
    jirac_log ERROR "The provided directory is not a git repository. Aborting."
    exit 1
fi

jirac_log INFO "Project root directory: $project_path"
jirac_echo ""


# version

jirac_echo "## Grabbing Maven name, artifact version and SCM URL... "

project=$(jirac_get_maven_project_name "$project_pom")
project_version=$(jirac_get_maven_version "$project_pom")
gitlab_base_url=$(jirac_get_scm_url "$project_pom")
if [ -z "$gitlab_base_url" ]
then
    gitlab_base_url=$(jirac_get_connection_url "$project_pom")
fi

if [ -z "$project_version" ]; then
    jirac_log ERROR "Either you don't follow a semantic versioning scheme or this is not a Maven project. Aborting."
    model_error "no version found!"

elif [ -z "$project" ]; then
    jirac_log ERROR "Please check <name> is present in your POM"
    model_error "no project name found!"

elif [ -z "$gitlab_base_url" ]; then
    jirac_log ERROR "Please make a section <scm><connection> is present in your POM"
    model_error "no SCM URL found!"
else
    jirac_echo " OK!"
    jirac_log INFO "version: $project_version"
    jirac_log INFO "SCM URL: $gitlab_base_url"
    jirac_log INFO "name: $project"
    jirac_echo ""
fi


# branch
while [ -z "$branch" ]; do
    jirac_log INFO "Your branch has no upstream set, please choose another one:"
    jirac_select Branch "git branch -r" $project_git_location
    branch=$answer
done

# commits
author=$(git config user.name)

if [ -z "$(git log -1 --committer="${author}" $branch)" ];then
    error "You have no pushed commit on this project. Only author of commit can generate comments."
fi

# Using the option -n (number of commit), -g (grep). If either one or both are specified, no need to manually select commits.
if [ -n "$number_of_commit" ] && [ -n "$regexp" ];then
    short_hashes=$(git --git-dir="${project_git_location}" log -"$number_of_commit" --grep "$regexp" --committer="${author}" --format=%h $branch)
elif [ -n "$number_of_commit" ];then
    short_hashes=$(git --git-dir="${project_git_location}" log -"$number_of_commit" --committer="${author}" --format=%h $branch)
elif [ -n "$regexp" ];then
    short_hashes=$(git --git-dir="${project_git_location}" log --committer="${author}" --grep "$regexp"  --format=%h $branch)
    [ -z "$short_hashes" ] && echo No commit matching the regexp: "$regexp" && exit 1
else
    jirac_echo -e "## Which commit \033[1mSHA1s\033[m?"
    until [ -n "$short_hashes" ]; do
        temp_file=$(jirac_mktemp)

        echo "# Select a commit by prepending 'x ' (without quotes)" > "$temp_file"
        git --git-dir="${project_git_location}" log -10  --committer="${author}" --format='%h %s' $branch >> "$temp_file"
        eval "$editor" "$temp_file"
        short_hashes="$(awk '/^x / { print $2 }' "$temp_file")"
    done
fi

jirac_echo ""
jirac_echo -e "## \033[7mFINAL RESULT...\033[m"


temp_clip=$(jirac_mktemp)

#TODO: real clean template
echo "
*$project*
* branche   : $branch
* version   : $project_version" > "$temp_clip"
if [ "$print_mode" = "0" ]; then
    echo "* commit(s) :" >> "$temp_clip"
    for hash in $short_hashes; do
        complete_sha1=$(git --git-dir="$project_git_location" log --format="%H" $hash -1)
        echo "** $gitlab_base_url/commit/$complete_sha1" >> "$temp_clip"

        # compute description
        msg=$(jirac_get_git_full_message "$project_git_location" $hash)"\n"
        default_description="${default_description}$msg"
    done

    # description override
    read -p "## Override description (y/n/skip)? " -n 1 -r
    echo ""
    if [[ $REPLY == "Y" || $REPLY == "y" ]]; then
        while [ -z "$description" ]; do
            echo -ne "\t... which is? "
            read description
        done
    elif [[ $REPLY == "S" || $REPLY == "s" ]]; then
        description=''
    else
        description=$default_description
    fi

    # append description
    if [ -n "${description}" ]; then
        echo -e "* Description:" >> "$temp_clip"
        echo -e "${description}" | awk -f "$jirac_dir"/preserve_paragraphs.awk >> "$temp_clip"
    fi
elif [[ "$print_mode" = "1" ]]; then
    # reverse list of commits to print them oldest first
    short_hashes=$(echo $short_hashes | tac --separator=" ")
    for hash in $short_hashes; do
        complete_sha1=$(git --git-dir="$project_git_location" log --format="%H" $hash -1)
        echo "* *$(jirac_get_git_subject "$project_git_location" $complete_sha1)*" >> "$temp_clip"
        echo "** $gitlab_base_url/commit/$complete_sha1" >> "$temp_clip"
        body=$(jirac_get_git_body "$project_git_location" $complete_sha1)
        if [ "$body" != "" ]; then
            echo -e "** " >> "$temp_clip"
            echo -e "${body}" | awk -f "$jirac_dir"/preserve_paragraphs.awk >> "$temp_clip"
        fi
    done
fi

jirac_copy_to_clipboard "$temp_clip"

jirac_victorious_print
