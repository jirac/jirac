#!/bin/bash
#
# Jirac is a tool to generate formatted comments based on informations such as
# commits, branch, version and concerned application.
#
# Must be used at the root of a maven project. POM must contains scm
# balise. It allows jirac to generate link to the source repository.
# The output is a message you can paste in jira
#
# Usage: jirac [--help|-h] [--number|-n number_of_commits] [--silent|-s] [--grep|-g pattern]
# With the --number option, you specify you want the n last pushed commit in your comment
# With the --silent option, log print are disabled
# With the --grep, you specify a pattern match commits. If none match, the programm exits
# 0: Most recent first
# 1: oldest first
#
# More information can be find at the following url: http://ihommani.gitbooks.io/jirac-guide/
#
# This work is licensed under The MIT License (MIT).

shopt -u sourcepath
jirac_dir=$(dirname "$0")

source "$jirac_dir"/core_functions.sh
source "$jirac_dir"/ui_functions.sh

umask 077 # Set access file only to the user who launched the script

# default values
log_level=1 # 0 = ERROR, 1 = INFO, 2 = DEBUG, -1 = silent mode
output_mode="c"
number_of_commit=""
regexp=""

while [ $# -gt 0 ]; do
    case $1 in
        --number | -number | --n | -n )
            test -z "$2" && usage_and_exit "Number of commits option requires an argument!"
            test 0 -gt "$2" && usage_and_exit "Number of commits value must be positive"
            number_of_commit=$2
            shift
            ;;
         --standard-output )
            output_mode="o"
            log_level=0 # implicitly change log level to ERROR
            ;;
        --silent | -silent | --s | -s )
            log_level=-1
            ;;
        --log-level | -log-level | --l | -l )
            test -z $2 && usage_and_exit "Log level option requires an argument!"
            jirac_apply_log_level $2
            shift
            ;;
        --grep | -grep | --g | -g )
            regexp=$2
            test -z $regexp && usage_and_exit "grep option requires a regexp."
            shift
            ;;
        --help | -help | --h | -h )
            usage_and_exit
            ;;
        --? | -? | -* )
            usage_and_exit "Unreconized option: $1"
            ;;
        * )
            break
            ;;
    esac
    shift
done
jirac_verify_options

jirac_log DEBUG "DEPENDENCY CHECK..."
if [[ $OSTYPE == darwin* ]]; then
    jirac_check_dependency pbcopy
    jirac_check_dependency gtac
elif [ $OSTYPE == msys ]; then
    jirac_check_dependency clip
    jirac_check_dependency mktemp
    jirac_check_dependency tac
else
    jirac_check_dependency xclip
    jirac_check_dependency tac
fi

for dependency in git sed `xml_parser`; do
    jirac_check_dependency $dependency
done

jirac_log DEBUG "CONFIGURATION CHECK..."
create_editor_variable

# project folder
root_dir=$(jirac_get_git_project_root_directory)

if [[ -d $root_dir && -f "${root_dir}/pom.xml" ]]; then
	project_path=$root_dir
	project_pom="$root_dir/pom.xml"
	project_git_location="$root_dir/.git"
	branch=$(jirac_get_git_current_remote_branch)
else
    message_and_exit "To run jirac please move inside your maven project on which you want to comment a commit."
fi
jirac_log DEBUG " project root directory: $project_path"
jirac_log DEBUG " project pom.xml: $project_pom"
jirac_log DEBUG " project Git directory location: $project_git_location"

# sanity checks
if [ ! -f  "$project_pom" ]; then
	message_and_exit "No POM file found in the project directory. Aborting."
fi

if [ ! -d "$project_git_location" ]; then
    message_and_exit "The provided directory is not a git repository. Aborting."
fi

jirac_log DEBUG " parsing POM... "
project=$(jirac_get_maven_project_name "$project_pom")
project_version=$(jirac_get_maven_version "$project_pom")
gitlab_base_url=$(jirac_get_scm_url "$project_pom")

if [ -z "$project_version" ]; then
    jirac_log ERROR "Either you don't follow a semantic versioning scheme or this is not a Maven project. Aborting."
    message_and_exit "no version found!"
elif [ -z "$project" ]; then
    jirac_log ERROR "Please check <name> is present in your POM"
    message_and_exit "no project name found!"
elif [ -z "$gitlab_base_url" ]; then
    jirac_log DEBUG "No <scm>.<url> section found in the current POM. No link will be generated."
else
    jirac_log INFO "version: $project_version"
    jirac_log INFO "SCM URL: $gitlab_base_url"
    jirac_log INFO "name: $project"
fi

# branch
if [[ "$output_mode" = "o" && -z "$branch" ]]; then
    message_and_exit "Your branch must have an upstream set in order to use option --standard-output"
fi
while [ -z "$branch" ]; do
    jirac_log INFO "Your branch has no upstream set, please choose another one:"
    branch=$(jirac_select Branch "git branch -r" $project_git_location)
done
jirac_log INFO "branch: $branch"

# commits
author=$(git config user.name)

if [ -z "$(git log -1 --committer="${author}" $branch)" ]; then
    message_and_exit "You have no pushed commit on this project. Only author of commit can generate comments."
fi

jirac_log DEBUG "Selecting commit(s)..."
# Using the option -n (number of commit), -g (grep). If either one or both are specified, no need to manually select commits.
if [[ -n "$number_of_commit" && -n "$regexp" ]]; then
    jirac_log DEBUG " selecting by applying grep $regexp on $number_of_commit last commit(s) of ${author}"
    short_hashes=$(git --git-dir="${project_git_location}" log -"$number_of_commit" --grep "$regexp" --committer="${author}" --format=%h $branch)
    test -z "$short_hashes" && message_and_exit "None of the $number_of_commit last commit(s) matched the regexp: $regexp"
elif [ -n "$number_of_commit" ]; then
    jirac_log DEBUG " selecting $number_of_commit last commit(s) of ${author}"
    short_hashes=$(git --git-dir="${project_git_location}" log -"$number_of_commit" --committer="${author}" --format=%h $branch)
elif [ -n "$regexp" ]; then
    jirac_log DEBUG " selecting by applying grep $regexp on commit(s) of ${author}"
    short_hashes=$(git --git-dir="${project_git_location}" log --committer="${author}" --grep "$regexp"  --format=%h $branch)
    test -z "$short_hashes" && message_and_exit "No commit matching the regexp: $regexp"
else
    jirac_log DEBUG " display editor to select commit(s)"
    until [ -n "$short_hashes" ]; do
        temp_file=$(jirac_mktemp)

        echo "# Select a commit by prepending 'x ' (without quotes)" > "$temp_file"
        git --git-dir="${project_git_location}" log -10  --committer="${author}" --format='%h %s' $branch >> "$temp_file"
        eval "$editor" "$temp_file"
        short_hashes="$(awk '/^x / { print $2 }' "$temp_file")"
    done
fi

jirac_log DEBUG "Building comment..."

temp_clip=$(jirac_mktemp)

echo "*$project*
* branche   : $branch
* version   : $project_version" > "$temp_clip"
# reverse list of commits to print them oldest first
short_hashes=$(echo $short_hashes | reverse_commits)
jirac_log INFO "Selected commits:"
for hash in $short_hashes; do
    complete_sha1=$(git --git-dir="$project_git_location" log --format="%H" $hash -1)
    subject=$(jirac_get_git_subject "$project_git_location" $complete_sha1)
    echo "* *$subject*" >> "$temp_clip"
    echo "** $gitlab_base_url/commit/$complete_sha1" >> "$temp_clip"
    body=$(jirac_get_git_body "$project_git_location" $complete_sha1)
    if [ "$body" != "" ]; then
        echo -e "** ${body}" | awk -f "$jirac_dir"/preserve_paragraphs.awk >> "$temp_clip"
    fi

    jirac_log INFO " - $hash $subject"
done

if [ "$output_mode" = "c" ]; then
    jirac_copy_to_clipboard "$temp_clip"
elif [ "$output_mode" = "o" ]; then
    cat "$temp_clip"
fi
